import tkinter as tk
from tkinter import ttk
from datetime import datetime
from openpyxl import Workbook, load_workbook
from tkinter import messagebox
import pandas as pd




def save_data():
    name = name_entry.get()
    birthday = birthday_entry.get()

    wb = load_workbook('data.xlsx')
    ws = wb.active
    # 检查是否已存在相同的名字
    for row in range(1, ws.max_row + 1):
        if ws.cell(row=row, column=1).value == name:
            messagebox.showwarning("重复", "该名字已存在！")
            
            update_list()  # 更新额外窗口中的人名和生日列表
            
            return

    row = ws.max_row + 1
    ws.cell(row=row, column=1).value = name
    ws.cell(row=row, column=2).value = birthday
    wb.save('data.xlsx')

    refresh_names_combo()  # 保存数据后立即刷新选择框
    update_extra_window()  # 更新额外窗口

def calculate_age():
    selected_name = names_combo.get()

    wb = load_workbook('data.xlsx')
    ws = wb.active
    for row in range(1, ws.max_row + 1):
        if ws.cell(row=row, column=1).value == selected_name:
            birthday_str = ws.cell(row=row, column=2).value
            birthday = datetime.strptime(birthday_str, '%Y-%m-%d').date()
            second_date_str = second_date_entry.get()
            second_date = datetime.strptime(second_date_str, '%Y-%m-%d').date()
            age_delta = second_date - birthday
            years = age_delta.days // 365
            months = (age_delta.days % 365) // 30
            result = f"{years}年 零 {months}个月"
            result_label.config(text=result)
            ws.cell(row=row, column=3).value = second_date_str
            ws.cell(row=row, column=4).value = result
            break

    wb.save('data.xlsx')

def refresh_names_combo():
    names_list.clear()  # 清空选择框内容

    wb = load_workbook('data.xlsx')
    ws = wb.active
    for row in range(1, ws.max_row + 1):
        name = ws.cell(row=row, column=1).value
        if name is not None:  # 移除"None"选项
            names_list.append(name)

    names_combo['values'] = names_list  # 更新选择框的值

def clear_data():
    selected_name = names_combo.get()

    if selected_name == "":
        return

    confirmation = messagebox.askquestion("确认", "是否确认清除？")
    if confirmation == "yes":
        wb = load_workbook('data.xlsx')
        ws = wb.active
        for row in range(1, ws.max_row + 1):
            if ws.cell(row=row, column=1).value == selected_name:
                ws.delete_rows(row)
                wb.save('data.xlsx')
                refresh_names_combo()
                name_entry.delete(0, tk.END)
                birthday_entry.delete(0, tk.END)
                second_date_entry.delete(0, tk.END)  # 清空第二个日期输入框的内容
                result_label.config(text="")  # 清空年龄差结果标签的内容
                names_combo.set("")  # 清空选择框的当前选择
                messagebox.showinfo("成功", "已成功清除数据")
                update_extra_window()  # 更新额外窗口
                break

def toggle_extra_window():
    if extra_window.winfo_viewable():
        extra_window.withdraw()  # 隐藏额外窗口
    else:
        extra_window.deiconify()  # 显示额外窗口

def update_list():
    data = pd.read_excel('data.xlsx')
    treeview.delete(*treeview.get_children())  # 清空Treeview控件

    for index, row in data.iterrows():
        name = row[0]
        birthday = row[1]
        treeview.insert("", tk.END, values=(name, birthday))  # 将人名和生日插入Treeview控件中

def update_extra_window():
    prev_data = None  # 存储上一次读取的数据

    def check_update():
        nonlocal prev_data
        
        data = pd.read_excel('data.xlsx')
        
        if not data.equals(prev_data):  # 检查数据是否有更新
            prev_data = data  # 更新prev_data
            
            treeview.delete(*treeview.get_children())  # 清空Treeview控件
            for index, row in data.iterrows():
                name = row[0]
                birthday = row[1]
                treeview.insert("", tk.END, values=(name, birthday))  # 将人名和生日插入Treeview控件中
        
        extra_window.after(5000, check_update)  # 每5秒检查一次更新
    
    extra_window.after(0, check_update)  # 立即开始检查更新

def toggle_extra_window():
    if extra_window.state() == "normal":
        extra_window.withdraw()  # 隐藏窗口
    else:
        extra_window.deiconify()  # 显示窗口


# 创建主窗口
root = tk.Tk()

# 创建其他部件...

root.title("生日计算器")
root.geometry("400x500")

name_label = tk.Label(root, text="名字：")
name_label.pack()

name_entry = tk.Entry(root)
name_entry.pack()

birthday_label = tk.Label(root, text="生日（YYYY-MM-DD）：")
birthday_label.pack()

birthday_entry = tk.Entry(root)
birthday_entry.pack()

save_button = tk.Button(root, text="保存名字和生日", command=save_data)
save_button.pack(pady=10)

names_label = tk.Label(root, text="选择名字：")
names_label.pack()
names_list = []
wb = load_workbook('data.xlsx')
ws = wb.active
for row in range(1, ws.max_row + 1):
    name = ws.cell(row=row, column=1).value
    if name is not None:
        names_list.append(name)


names_combo = ttk.Combobox(root, values=names_list, state="readonly") # 改成只读，避免光标输入
names_combo.pack()

second_date_label = tk.Label(root, text="第二个日期（YYYY-MM-DD）：")
second_date_label.pack()

second_date_entry = tk.Entry(root)
second_date_entry.pack()

calculate_button = tk.Button(root, text="计算年龄差", command=calculate_age)
calculate_button.pack(pady=10)

result_label = tk.Label(root)
result_label.pack()

clear_button = tk.Button(root, text="清除", command=clear_data)
clear_button.pack(pady=10)

# 创建额外窗口
extra_window = tk.Toplevel(root)
extra_window.title("生日列表")
extra_window.withdraw()  # 初始状态隐藏额外窗口

# 创建Treeview控件用于显示人名和生日列表
treeview = ttk.Treeview(extra_window, columns=("Name", "Birthday"))
treeview.heading("#0", text="名字")
treeview.heading("#1", text="生日")
treeview.grid(row=0, column=0, columnspan=2, padx=10, pady=10)

extra_window.grid_rowconfigure(0, weight=1)
extra_window.grid_columnconfigure(0, weight=1)

# 更新额外窗口中的人名和生日列表
update_extra_window()

# 创建按钮用于折叠或展开额外窗口
toggle_button = tk.Button(root, text="信息列表", command=toggle_extra_window)
toggle_button.pack()




# 运行主循环
root.mainloop()
